<?php

declare(strict_types=1);
/*
 * This file is part of the gpoehl/phpReport library.
 *
 * @license   GNU LGPL v3.0 - For details have a look at the LICENSE file
 * @copyright Günter Pöhl
 * @link      https://github.com/gpoehl/phpReport/readme
 * @author    Günter Pöhl  <phpReport@gmx.net>
 */

namespace gpoehl\phpReport;

/**
 * Alternate prototype class.
 * Returns minmum string output primarily for running unit tests.
 * 
 * Actions to be executed in default target might be redirected to a prototype 
 * class. See setting runTimeOptions.
 * 
 * Methods might also be called from default actions by calling the prototype()
 * method of the report class.
 */
class PrototypeBase
{
    /**
     * @param report $rep The php report object
     */
    public function __construct(protected Report $rep) {
    }

    /**
     * Call related method to the one last called in target class.
     * Parameters are pulled here to simplify the report class.
     * @return string Html table generated by method to be called
     */
    public function magic(): string {
        $method = $this->rep->currentAction->key;
        $methodName = $method->name;
        return match ($method->group()) {
           'group' =>
            $this->$methodName(
                    $this->rep->getGroupValue(),
                    $this->rep->getRow(),
                    $this->rep->getRowKey(),
            ),
            'detail',  =>
            $this->$methodName(
                    $this->rep->getRow(),
                    $this->rep->getRowKey(),
            ),
             'dim' =>
            $this->$methodName(
                    $this->rep->getRow(),
                    $this->rep->getRowKey(),
                    $this->rep->getDimID()
            ),
            //  Methods without extra parameters,
           default => $this->$methodName(),
        };
    }

    /**
     * Get the name of method which would have been called in target class
     * @return string When action is a string or a closure the related constant
     * will be returned.
     */
    protected function getMethodName(): string {
        $action = $this->rep->currentAction;
        switch ($action->targetKey) {
            // For typ method return only the method name (second array element)
            case Action::METHOD:
                return $action->target;
            case Action::CALLABLE:
                // Build method name from class and method
                $name = '';
                is_callable($action->target, true, $name);
                // cast because $name for an anonymous class might include substring \000 which represents octal notation
                return (string) $name;
            case Action::CLOSURE:
                return 'closure';
            case Action::STRING:
                return 'string: ' . htmlentities(substr($action->target, 0, 60));
            default:
                // WARNING and ERROR are handled in Report class
                throw \InvalidArgumentException("Call type '$action->target' is invalid");
        }
    }

}
